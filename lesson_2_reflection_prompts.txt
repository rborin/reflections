What happens when you initialize a repository? Why do you need to do it?

	Git creates a .init directory where it will store metadata about
	the files it will manage.

How is the staging area different from the working directory and the repository?
What value do you think it offers?

	It is an intermediate location where you can place files before commiting.
	It allows you to confirm which files you actually want to go in a commit
	which is specially useful when you are commiting multiple files.

How can you use the staging area to make sure you have one commit per logical
change?

	You add files and possibly review them with git diff --staged to make
	sure they are all related.

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?

	When you are working with different versions of your program or when
	testing new possibilities that you don't want to disrupt your main
	or production code.

How do the diagrams help you visualize the branch structure?

	It is much easier to understand the different paths your changes took by
	viewing them graphically.

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

	The result of a merge is a commit having as parents the commits that were
	merged by it. Also, the branch label into which the merge was done moves
	to this last commit. These pieces of information can be easily represented
	graphically by two arrows from the new commit to the parent commits.

What are the pros and cons of Git's automatic merging vs. always doing merges
manually?

	Pro:
		You don't have to spend time doing something that could be done 
		automatically.
	Con:
		Conflict might happen and you would have to solve them manually.
		Besides that, conflicts are detected by the location they occur. So,
		if two changes are logically conflicting but in different locations,
		they might not be detected. Best approach would probably be to review
		the merged files.
